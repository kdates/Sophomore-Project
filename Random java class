
package lab13;
public class BSTString implements Cloneable
{
  private StringBT root; 
public class StringBT 
 {
    String data;
    StringBT  left;
    StringBT  right;
    public StringBT (String data,StringBT left,StringBT  right)
    {
        this.data=data;
        this.left=left;
        this.right=right;
    }
    public String getData()
    {
        return data;
    }
    public StringBT treeCopy(StringBT  x)
    {
     StringBT leftCop,rightCop;
       if(x==null)
         return null;
       else
       {
           leftCop=treeCopy(x.left);
           rightCop=treeCopy(x.right);
           return new StringBT (x.data,leftCop,rightCop);
       }
    }
    public StringBT  getLeft()
    {
        return left;
    }
    public StringBT  getRight()
    {
        return right;
    }
    public String getLeftmost()
    {
        if(left==null)
            return data; 
        else 
         return left.getLeftmost();
    }
    public boolean isLeaf()
    {
        return (left==null)&&(right==null);
    }

    public void setData(String data) {
        this.data = data;
    }
    
    public boolean remove(StringBT root,String target)
{
  StringBT curr=root;
  StringBT parent=null;
  boolean x=true;
  while(true &&curr!=null)
  {
      if(curr.getData().compareTo(target)==0)
      {
          break;
      }
      else if(curr.getData().compareTo(target)<0)
      {
          parent=curr;
          curr=curr.getRight();
      }
      else if(curr.getData().compareTo(target)>=0)
      {
          parent=curr;
          curr=curr.getLeft();
      }
  }
  if(curr == null) 
    return false;
if(curr.getLeft() == null)
{
if(curr == this) 
{ root = root.getRight(); }
else if(curr == parent.getLeft()) 
{
parent.setLeft(curr.getRight());
}
else
{
    parent.setRight(curr.getRight());
}
}
return true; 
}
    public void setLeft(StringBT  left) {
        this.left = left;
    }

    public void setRight(StringBT  right) {
        this.right = right;
    }
    public String getRightmost()
    {
        if(right==null)
            return data; 
        else 
         return right.getRightmost();
    }
    public StringBT  removeLeftMost()
    {
      if(left==null)
      {
          return right;
      }
      else
      {
          left=left.removeLeftMost();
          return this;
      }
    }
    public StringBT removeRightMost()
    {
        if(right==null)
            return left;
        else 
        {   right =right.removeRightMost();
        return this;
    }
    }
    public void preOrder()
    {
        System.out.print(data+" ");
        if(left!=null)
            left.preOrder();
        if(right!=null)
            right.preOrder();
    }
    public void inOrder()
    {
        if(left!=null)
            left.inOrder();
        System.out.print(data+" ");
        if(right!=null)
            right.inOrder();
    }
    public void postOrder()
    {
        if(this==null)
        return;
         if(left!=null)
            left.postOrder();
        if(right!=null)
            right.postOrder();
        System.out.print(data
    }
 }
 public BSTString()
 {
     root=null;
 }
public void insert(String s)
 {
    root= inserter(root,s);
 }
private StringBT inserter(StringBT root,String val)//I decided to make a helper method to make the add method a little more readable to me
 {
     if(root==null )
     {
         root=new StringBT(val,null,null);
         return root;
     }
     else if(root.data.compareToIgnoreCase(val)>0)
     {
         root.left=inserter(root.left,val);
       
     }
     else
     {
        root.right=inserter(root.right,val);
     } 
     return root;
 }
public static boolean delete(BSTString root, String s)  
{ 
    if (root == null)  
        return false; 
   StringBT cursor = root.root; 
   StringBT parent = null;
boolean found = false;
while(!found && cursor != null)
{
if(s.compareToIgnoreCase(cursor.data)==0)
{ 
    found = true; 
}
else if(s.compareToIgnoreCase(cursor.data)<=0)
{
parent = cursor; 
cursor = cursor.left;
}
else if(s.compareToIgnoreCase(cursor.data)>0) 
{
parent = cursor; 
cursor = cursor.right; }
}
if(cursor==null)
    found=false;
else if(parent==null&&cursor.right!=null)
{
    cursor.data=cursor.right.getLeftmost();
    cursor.right=cursor.right.removeLeftMost();
}
else if(parent==null&&cursor.right==null)
{
    cursor.data=cursor.left.getRightmost();
    cursor.left=cursor.left.removeRightMost();
}
else if(parent.data.compareToIgnoreCase(cursor.data)<=0)
{
    if(cursor.left==null&&cursor.right==null)
    {
       parent.right=null;
    }
    else if(cursor.left!=null&&cursor.right==null)
    {
       parent.right=cursor.left;
    }
    else if(cursor.left==null&&cursor.right!=null)
    {
       parent.right=cursor.right;
    }
    else if(cursor.left!=null&&cursor.right!=null)
    {
       parent.right=cursor.right;
       parent.right.left=cursor.left;
    }
}
else if(parent.data.compareToIgnoreCase(cursor.data)>0)
{
    if(cursor.left==null&&cursor.right==null)
    {
       parent.left=null;
    }
    else if(cursor.left!=null&&cursor.right==null)
    {
       parent.left=cursor.left;
    }
    else if(cursor.left==null&&cursor.right!=null)
    {
       parent.left=cursor.right;
    }
    else if(cursor.left!=null&&cursor.right!=null)
    {
       parent.left=cursor.right;
       parent.left.right=cursor.left;
    }
}
return found;
}
public void printPreOrder()
{
    root.preOrder();
}
public void printInorder()
{
root.inOrder();
}
public void printPostOrder()
{
    root.postOrder();
}
public static int countOccurrences(BSTString root, String target){
StringBT cursor = root.root;
int count = 0;
while(cursor != null)
{
if(cursor.data.compareToIgnoreCase(target)==0)
{
    count++;
    cursor = cursor.right;
} 
else if (cursor.data.compareToIgnoreCase(target)>=0) {
cursor = cursor.left;
} 
else if (cursor.data.compareToIgnoreCase(target)<0) 
{
cursor = cursor.right;
}
}
return count;
}
private void addAll2(StringBT x)
{
  if(x!=null)
  {
      insert(x.data);
      addAll2(x.left);
      addAll2(x.right);
  }
  else
      return;
}
public void addAll(BSTString x)
{
    StringBT addRoot;
    if(root==x.root)
    {
        addRoot=x.root.treeCopy(x.root);
        addAll2(addRoot);
    }
    else
        addAll2(x.root);
}

}
